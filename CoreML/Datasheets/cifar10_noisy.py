import torch
from torchvision import datasets, transforms
from torch.utils.data import Dataset
import numpy as np
import matplotlib.pyplot as plt

# Set random seed for reproducibility for the sequences of random numbers generated by PyTorch, Numpy and Python
torch.manual_seed(42)
np.random.seed(42)

def add_symmetric_noise(labels, noise_rate=0.2, num_classes=10):
    noisy_labels = labels.copy()
    num_samples = len(noisy_labels)
    
    for class_idx in range(num_classes):
        # Get indices of samples with the current class
        class_indices = np.where(np.array(labels) == class_idx)[0]  # [0] is critical!
        n_class_samples = len(class_indices)

        #Check for empty classes
        if n_class_samples == 0:
            continue

        # Number of samples to corrupt for this class
        num_corrupt = int(noise_rate * len(class_indices))
        
        #Check for no corruption
        if num_corrupt == 0:
            continue

        # Randomly select samples to corrupt
        corrupt_indices = np.random.choice(class_indices, size = num_corrupt, replace=False)
        
# Generate new labels (excluding the original class)
        new_labels = np.random.choice(
            [c for c in range(num_classes) if c != class_idx], 
            size=num_corrupt
          )  # Skip the original class

        # Update noisy_labels
        noisy_labels[corrupt_indices] = new_labels
    
    return noisy_labels

# Define transforms
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), 
                        (0.2470, 0.2435, 0.2616))
])

# Load original CIFAR-10
train_dataset = datasets.CIFAR10(
    root='./data', train=True, download=True, transform=transform
)

# Extract original labels
original_labels = np.array(train_dataset.targets)

# Apply symmetric noise (η=0.2)
noisy_labels = add_symmetric_noise(original_labels, noise_rate=0.2)

# Update dataset with noisy labels
train_dataset.targets = noisy_labels.tolist()

# Check label distribution for class 0 (airplane)
class_idx = 0
original_class = (original_labels == class_idx).sum()
noisy_count = (noisy_labels == class_idx).sum()

print(f"Original samples in class {class_idx}: {original_class}")
print(f"Noisy samples in class {class_idx}: {noisy_count}")
print(f"Corrupted samples: {original_class - noisy_count}")

def plot_samples(dataset, title, num_samples=10):
    classes = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']
    
    fig, axes = plt.subplots(1, num_samples, figsize=(15, 2))
    for i in range(num_samples):
        img, label = dataset[i]
        img = img.numpy().transpose(1, 2, 0)  # (C, H, W) → (H, W, C)
        img = img * np.array([0.2470, 0.2435, 0.2616]) + np.array([0.4914, 0.4822, 0.4465])  # Unnormalize
        img = np.clip(img, 0, 1)
        axes[i].imshow(img)  
        axes[i].set_title(f"True: {classes[label]}", fontsize=8)
        axes[i].axis('off')
    plt.suptitle(title)
    plt.show()

# Plot first 10 samples
plot_samples(train_dataset, "Noisy CIFAR-10 Samples (η=0.2)")
